{"version":3,"file":"index.js","sourceRoot":"/","sources":["index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,+BAAoC;AACpC,sDAA8B;AAC9B,iEAA0D;AAC1D,2DAAuE;AACvE,iEAA+C;AAC/C,kDAA6D;AAC7D,2BAAqC;AACrC,8CAAkD;AAElD,MAAM,IAAI,GAAG,IAAI,CAAC;AAClB,MAAM,MAAM,GAAG,IAAI,8BAAM,EAAE,CAAC;AAG5B,MAAM,QAAQ,GAAG,2BAAG,CAAA;;;;;;;;CAQnB,CAAC;AAGF,MAAM,SAAS,GAAG;IAChB,KAAK,EAAE;QACL,aAAa;YACX,OAAO,aAAa,CAAC;QACvB,CAAC;KACF;IACD,YAAY,EAAE;QACZ,iBAAiB,EAAE;YACjB,SAAS,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,oBAAoB,CAAC,CAAC;SAC9D;KACF;CACF,CAAC;AAIF,MAAM,MAAM,GAAG,6BAAoB,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC;AAI7D,MAAM,GAAG,GAAG,iBAAO,EAAE,CAAC;AACtB,MAAM,UAAU,GAAG,mBAAY,CAAC,GAAG,CAAC,CAAC;AAGrC,MAAM,QAAQ,GAAG,IAAI,oBAAe,CAAC;IACnC,MAAM,EAAE,UAAU;IAClB,IAAI,EAAE,UAAU;CACjB,CAAC,CAAC;AACH,MAAM,aAAa,GAAG,cAAS,CAAC,EAAE,MAAM,EAAE,EAAE,QAAQ,CAAC,CAAC;AAGtD,MAAM,MAAM,GAAG,IAAI,oCAAY,CAAC;IAC9B,MAAM;IACN,OAAO,EAAE;QAEP,sDAAiC,CAAC,EAAE,UAAU,EAAE,CAAC;QAGjD;YACQ,eAAe;;oBACnB,OAAO;wBACC,WAAW;;gCACf,MAAM,aAAa,CAAC,OAAO,EAAE,CAAC;4BAChC,CAAC;yBAAA;qBACF,CAAC;gBACJ,CAAC;aAAA;SACF;KACF;CACF,CAAC,CAAC;AACH,MAAM,IAAI,GAAG,GAAS,EAAE;IACtB,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;IACrB,MAAM,CAAC,eAAe,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;IAGhC,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;QAC3B,OAAO,CAAC,GAAG,CACT,+CAA+C,IAAI,GAAG,MAAM,CAAC,WAAW,EAAE,CAC3E,CAAC;QACF,OAAO,CAAC,GAAG,CACT,oDAAoD,IAAI,GAAG,MAAM,CAAC,WAAW,EAAE,CAChF,CAAC;IACJ,CAAC,CAAC,CAAC;IAIH,IAAI,aAAa,GAAG,CAAC,CAAC;IACtB,SAAS,eAAe;QACtB,aAAa,EAAE,CAAC;QAChB,MAAM,CAAC,OAAO,CAAC,oBAAoB,EAAE,EAAE,iBAAiB,EAAE,aAAa,EAAE,CAAC,CAAC;QAC3E,UAAU,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;IACpC,CAAC;IAED,eAAe,EAAE,CAAC;AACpB,CAAC,CAAA,CAAC;AACF,IAAI,EAAE,CAAC","sourcesContent":["import { createServer } from \"http\";\nimport express from \"express\";\nimport { ApolloServer, gql } from \"apollo-server-express\";\nimport { ApolloServerPluginDrainHttpServer } from \"apollo-server-core\";\nimport { PubSub } from \"graphql-subscriptions\";\nimport { makeExecutableSchema } from \"@graphql-tools/schema\";\nimport { WebSocketServer } from \"ws\";\nimport { useServer } from \"graphql-ws/lib/use/ws\";\n\nconst PORT = 4000;\nconst pubsub = new PubSub();\n\n// Schema definition\nconst typeDefs = gql`\n  type Query {\n    currentNumber: Int\n  }\n\n  type Subscription {\n    numberIncremented: Int\n  }\n`;\n\n// Resolver map\nconst resolvers = {\n  Query: {\n    currentNumber() {\n      return currentNumber;\n    },\n  },\n  Subscription: {\n    numberIncremented: {\n      subscribe: () => pubsub.asyncIterator([\"NUMBER_INCREMENTED\"]),\n    },\n  },\n};\n\n// Create schema, which will be used separately by ApolloServer and\n// the WebSocket server.\nconst schema = makeExecutableSchema({ typeDefs, resolvers });\n\n// Create an Express app and HTTP server; we will attach the WebSocket\n// server and the ApolloServer to this HTTP server.\nconst app = express();\nconst httpServer = createServer(app);\n\n// Set up WebSocket server.\nconst wsServer = new WebSocketServer({\n  server: httpServer,\n  path: \"/graphql\",\n});\nconst serverCleanup = useServer({ schema }, wsServer);\n\n// Set up ApolloServer.\nconst server = new ApolloServer({\n  schema,\n  plugins: [\n    // Proper shutdown for the HTTP server.\n    ApolloServerPluginDrainHttpServer({ httpServer }),\n\n    // Proper shutdown for the WebSocket server.\n    {\n      async serverWillStart() {\n        return {\n          async drainServer() {\n            await serverCleanup.dispose();\n          },\n        };\n      },\n    },\n  ],\n});\nconst main = async () => {\n  await server.start();\n  server.applyMiddleware({ app });\n\n  // Now that our HTTP server is fully set up, actually listen.\n  httpServer.listen(PORT, () => {\n    console.log(\n      `ðŸš€ Query endpoint ready at http://localhost:${PORT}${server.graphqlPath}`\n    );\n    console.log(\n      `ðŸš€ Subscription endpoint ready at ws://localhost:${PORT}${server.graphqlPath}`\n    );\n  });\n\n  // In the background, increment a number every second and notify subscribers when\n  // it changes.\n  let currentNumber = 0;\n  function incrementNumber() {\n    currentNumber++;\n    pubsub.publish(\"NUMBER_INCREMENTED\", { numberIncremented: currentNumber });\n    setTimeout(incrementNumber, 1000);\n  }\n  // Start incrementing\n  incrementNumber();\n};\nmain();\n"]}